" Vundle Stuff"
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
"
" " let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
"
" " The following are examples of different formats supported.
" " Keep Plugin commands between vundle#begin/end.
" " plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" " plugin from http://vim-scripts.org/vim/scripts.html
" " Plugin 'L9'
" " Git plugin not hosted on GitHub
 "Plugin 'git://git.wincent.com/command-t.git'
" " git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" " The sparkup vim script is in a subdirectory of this repo called vim.
" " Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" " Install L9 and avoid a Naming conflict if you've already installed a
" " different version somewhere else.
" " Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'alvan/vim-closetag'
Plugin 'wakatime/vim-wakatime'
Plugin 'itchyny/lightline.vim'
Plugin 'frazrepo/vim-rainbow'
Plugin 'dense-analysis/ale'
Plugin 'preservim/nerdtree'
" " All of your Plugins must be added before the following line
call vundle#end()            " required
"filetype plugin indent on    " required
" " To ignore plugin indent changes, instead use:
  filetype plugin on
" "
" " Brief help
" " :PluginList       - lists configured plugins
" " :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" " :PluginSearch foo - searches for foo; append `!` to refresh local cache
" " :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" "
" " see :h vundle for more details or wiki for FAQ
" " Put your non-Plugin stuff after this line

colorscheme elflord

filetype plugin indent on
let g:rainbow_active = 1
set nowrap
hi Search NONE
set incsearch
syntax enable
set cindent
set nobackup
set laststatus=2
set ignorecase
set hlsearch
set noswapfile

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set expandtab
set textwidth=100
set tabstop=4
set shiftwidth=4
set mouse=a

set number
set autoindent

set enc=latin1
set guifont=system

set statusline=%-f%m\ %r\ %y%=BUFF=%n\ %l,%c

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Highlights bad whitespace red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
autocmd vimenter    * NERDTree
" Phill's custom _vimrc Rev 2 -- first one was blown away :'(

function ToggleComment()
let s:save_y = @y
normal 02"yyl
if @y == "/*"
    normal 02x$xx
else
    execute "normal 0i/*\<Esc>$a*/\<Esc>"
endif
let @y = s:save_y
unlet s:save_y
endfunction

let s:toggle = 0

function PhillComment()
    if s:toggle == 0
        execute "normal \<Esc>O/* EPB EPB EPB */\<Esc>"
        let s:toggle = 1
    else
        execute "normal \<Esc>o/* EPB EPB EPB */\<Esc>"
        let s:toggle = 0
    endif
endfunction

nnoremap <C-Tab> :bn!<Return>
nnoremap <C-S-Tab> :bp!<Return>
nnoremap <C-Z> <C-W><C-W>
nnoremap <F9> :1new<Return><C-W>r
nnoremap <F2> <Esc>:call ToggleComment()<Return>
nnoremap <F3> <Esc>:call PhillComment()<Return>
nnoremap <F4> <Esc>:cd %:h<Return>
vmap // y/<C-R>"<CR>
vmap <C-Z> <Esc><C-W><C-W>

" map right click to command repetition
map <RightMouse> .

nnoremap <F5> :set invpaste paste?<CR>
set pastetoggle=<F5>
set showmode

function Sudsy()
let s:xx = 0
let s:save_a = @a
let s:grid = ""
let s:numidx = 0
let s:blankidx = 0
silent !wget -O sudoku.txt http://show.websudoku.com/?difficulty=3
edit sudoku.txt
" Reduce to one line
execute "normal ggv/class=t>\<Return>djvGddd"
echo "reduced"
normal "ayy
let s:numidx =  stridx(@a, "READONLY", s:numidx + 1)
echo "numidx =" . s:numidx
let s:blankidx =  stridx(@a, "MAXLENGTH", s:blankidx + 1)
echo "blankidx =" . s:blankidx
for xx in range(1,81)
while s:numidx > s:blankidx
    let s:grid = s:grid . ' '
    let s:blankidx =  stridx(@a, "MAXLENGTH", s:blankidx + 1)
    echo "blankidx =" . s:blankidx
    if s:blankidx == -1
        let s:blankidx = 2000
        echo "blankidx =" . s:blankidx
    endif
endwhile
while s:numidx < s:blankidx
    let s:grid = s:grid . strpart(@a, s:numidx+16,1)
    let s:numidx =  stridx(@a, "READONLY", s:numidx + 1)
    echo "numidx =" . s:numidx
    if s:numidx == -1
        let s:numidx = 2000
        echo "numidx =" . s:numidx
    endif
endwhile
endfor

" s:grid should now contain the string we want
echo s:grid
endfunction
